using Shared;
using System.Reactive.Concurrency;
using System.Reactive.Linq;

namespace S19SequenceGenerators
{
    internal class Program
    {
        public static void MsTestInterval()
        {
            //https://learn.microsoft.com/en-us/previous-versions/dotnet/reactive-extensions/hh228911(v=vs.103)

            //*********************************************************************************************//
            //*** Generate a sequence of integers starting at zero until ENTER is pressed.              ***//
            //***                                                                                       ***//
            //*** A new integer will be generated by the Interval operator after each 2 second period   ***//
            //*** expires.                                                                              ***//
            //***                                                                                       ***//
            //*** By using the ThreadPool scheduler, the sequence of integers will be generated by a    ***//
            //*** thread in the .NET thread so the main thread is not blocked.                          ***//
            //*********************************************************************************************//

            const int periodInSec = 2;
            var obs = Observable.Interval(TimeSpan.FromSeconds(periodInSec),
                /*Scheduler.ThreadPool*/Scheduler.Default);

            //Warning CS0618  'Scheduler.ThreadPool' is obsolete:
            //'This property is no longer supported due to refactoring of the API surface and elimination of platform-specific dependencies.
            //Consider using Scheduler.Default to obtain the platform's most appropriate pool-based scheduler.
            //In order to access a specific pool - based scheduler,
            //please add a reference to the System.Reactive.PlatformServices assembly for your target platform
            //and use the appropriate scheduler in the System.Reactive.Concurrency namespace.'

            //*********************************************************************************************//
            //*** Write each value from Interval to the console window along with the current time to   ***//
            //*** show the period time span in effect.                                                  ***//
            //*********************************************************************************************//

            using (IDisposable handle = obs.Subscribe(x => Console.WriteLine("Integer : {0}\tCurrent Time : {1}", x, DateTime.Now.ToLongTimeString())))
            {
                Console.WriteLine("Press ENTER to exit...\n");
                Console.ReadLine();
            }
        }

        static void Main(string[] args)
        {
            var tenToTwenty = Observable.Range(10, 11);
            var tenToTwenty2 = Observable.Range(10, 11).Select(v => $"[{v}]");
            tenToTwenty.Inspect("range");
            tenToTwenty2.Inspect("range2");

            var generated = Observable.Generate(
                1,
                value => value < 100,
                value => value * value + 1,
                value => $"[{value}]" // like LINQ Select()
                );
            generated.Inspect("generated");

            var generated2 = Observable.Generate(
                initialState: 1,
                condition: value => value < 100,
                iterate: value => value * value + 1,
                resultSelector: value => $"[{value}]");
            generated2.Inspect("generated");

            var interval = Observable.Interval(TimeSpan.FromMilliseconds(500));
            using (interval.Inspect("interval"))
            {
                Console.ReadKey();
            }

            MsTestInterval();

            Console.WriteLine("Wait for the timer, 2 sec:");
            var timer = Observable.Timer(TimeSpan.FromSeconds(2));
            timer.Inspect("timer"); // wait single interval and produce the value
            Console.ReadLine();

            //Replicate Observable.Interval with Observable.Timer
            Console.WriteLine("Wait for the timer2, 2 sec with the period 2 sec, similar to the Interval:");
            var timer2 = Observable.Timer(
                dueTime: TimeSpan.FromSeconds(2),
                period: TimeSpan.FromSeconds(2) // specify period = similar to Interval
                /* or TimeSpan.Zero with no delay*/);
            timer2.Inspect("timer2");
            Console.ReadLine();
        }
    }
}